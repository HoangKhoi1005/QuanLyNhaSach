package com.raven.form;

import SQLServerProvider.SQLServerProvider;
import com.DTO.SachDTO;
import java.util.ArrayList;
import com.DAO.SachDAO;
import com.raven.component.Table;
import com.raven.dialog.Message;
import com.raven.model.ModelStudent;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;
import com.raven.swing.table.EventAction;
import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javaswingdev.message.MessageDialog;
import javax.swing.SwingUtilities;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.ImageIcon;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
/**
 *
 * @author ACER
 */
public class Form_QuanLySach extends javax.swing.JPanel {
    private SQLServerProvider conn;
    private Main main;
    /**
     * Creates new form Form_QuanLySach
     */
    public Form_QuanLySach(Main main) {
        this.main = main;
        initComponents();
        conn = new SQLServerProvider();
        conn.open();
        hienThiDS();
        suaThongTinKhiDoubleClick();
        tbSach.setRowHeight(130);
        conn.close();
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbSach = new com.raven.component.Table();
        btnTraCuu = new com.raven.component.Button();
        txtTraCuu = new com.raven.component.TextField();
        cboSapXep = new combo_suggestion.ComboBoxSuggestion();
        btnHuySach = new com.raven.component.Button();
        btnSuaSach = new com.raven.component.Button();
        btnThemSach = new com.raven.component.Button();
        btnSapXep = new com.raven.component.Button();

        setOpaque(false);

        jLabel1.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(4, 72, 210));
        jLabel1.setText("Sản Phẩm / Quản Lý Sách");

        tbSach.setBackground(new java.awt.Color(236, 234, 234));
        tbSach.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sách", "Ảnh sách", "Tên sách", "Thể loại", "Tên tác giả", "Ngày xuất bản", "Tên nhà xuất bản", "Giá bán", "Số lượng tồn"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Byte.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbSach.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        tbSach.setGridColor(new java.awt.Color(204, 204, 204));
        tbSach.setSelectionBackground(new java.awt.Color(102, 102, 255));
        tbSach.setSelectionForeground(new java.awt.Color(255, 255, 255));
        tbSach.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tbSach.setShowGrid(true);
        jScrollPane2.setViewportView(tbSach);
        if (tbSach.getColumnModel().getColumnCount() > 0) {
            tbSach.getColumnModel().getColumn(1).setPreferredWidth(130);
            tbSach.getColumnModel().getColumn(1).setMaxWidth(130);
            tbSach.getColumnModel().getColumn(2).setPreferredWidth(200);
            tbSach.getColumnModel().getColumn(2).setMaxWidth(200);
            tbSach.getColumnModel().getColumn(8).setPreferredWidth(90);
            tbSach.getColumnModel().getColumn(8).setMaxWidth(90);
        }

        btnTraCuu.setBackground(new java.awt.Color(153, 153, 255));
        btnTraCuu.setForeground(new java.awt.Color(255, 255, 255));
        btnTraCuu.setText("Tra Cứu");
        btnTraCuu.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        btnTraCuu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTraCuuActionPerformed(evt);
            }
        });

        txtTraCuu.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtTraCuu.setName(""); // NOI18N
        txtTraCuu.setShadowColor(new java.awt.Color(99, 91, 255));

        cboSapXep.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Vui lòng chọn dữ liệu cần sắp xếp--", "Mã sách", "Tên sách", "Thể loại", "Tên tác giả", "Giá bán", "Số lượng tồn", "Ngày xuất bản" }));
        cboSapXep.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        cboSapXep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboSapXepActionPerformed(evt);
            }
        });

        btnHuySach.setBackground(new java.awt.Color(244, 67, 54));
        btnHuySach.setForeground(new java.awt.Color(255, 255, 255));
        btnHuySach.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/raven/icon/minus.png"))); // NOI18N
        btnHuySach.setText("Hủy sách");
        btnHuySach.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnHuySach.setIconTextGap(10);
        btnHuySach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHuySachActionPerformed(evt);
            }
        });

        btnSuaSach.setBackground(new java.awt.Color(0, 140, 186));
        btnSuaSach.setForeground(new java.awt.Color(255, 255, 255));
        btnSuaSach.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/raven/icon/PenToSquare.png"))); // NOI18N
        btnSuaSach.setText("Sửa sách");
        btnSuaSach.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnSuaSach.setIconTextGap(10);
        btnSuaSach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaSachActionPerformed(evt);
            }
        });

        btnThemSach.setBackground(new java.awt.Color(76, 175, 80));
        btnThemSach.setForeground(new java.awt.Color(255, 255, 255));
        btnThemSach.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/raven/icon/addWhite.png"))); // NOI18N
        btnThemSach.setText("Thêm sách");
        btnThemSach.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnThemSach.setIconTextGap(10);
        btnThemSach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemSachActionPerformed(evt);
            }
        });

        btnSapXep.setBackground(new java.awt.Color(153, 153, 255));
        btnSapXep.setForeground(new java.awt.Color(255, 255, 255));
        btnSapXep.setText("Sắp xếp theo:");
        btnSapXep.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtTraCuu, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnTraCuu, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnSapXep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cboSapXep, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(0, 833, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnThemSach, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnHuySach, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSuaSach, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTraCuu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTraCuu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboSapXep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSapXep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnThemSach, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnHuySach, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSuaSach, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnThemSachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemSachActionPerformed
        Form_ThemSach frm = new Form_ThemSach(this,main);
        
        JDialog dialog = new JDialog((JFrame)null, "Thêm sách", true);
        dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        dialog.getContentPane().add(frm);
        dialog.pack();
        dialog.setLocationRelativeTo(null);
        dialog.setVisible(true);
    }//GEN-LAST:event_btnThemSachActionPerformed

    private void btnHuySachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHuySachActionPerformed
        int selectedRow  = tbSach.getSelectedRow();
        if(selectedRow != -1)
        {
            DefaultTableModel model = (DefaultTableModel) tbSach.getModel();
            String maSach = model.getValueAt(selectedRow, 0).toString();
            String tenSach = model.getValueAt(selectedRow, 1).toString();
            String tenTL = model.getValueAt(selectedRow, 2).toString();
            String tenTG = model.getValueAt(selectedRow, 3).toString();
            String ngayXB = model.getValueAt(selectedRow, 4).toString();
            String tenNXB = model.getValueAt(selectedRow, 5).toString();
            String giaBan = model.getValueAt(selectedRow, 6).toString();
            String soLuongTon = model.getValueAt(selectedRow, 7).toString();
            
            Form_HuySach frm = new Form_HuySach(this,maSach,tenSach,tenTL,tenTG,ngayXB,tenNXB,giaBan,soLuongTon);
        
            JDialog dialog = new JDialog((JFrame)null, "Hủy sách", true);
            dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
            dialog.getContentPane().add(frm);
            dialog.pack();
            dialog.setLocationRelativeTo(null);
            dialog.setVisible(true);
        }
        else
        {
            boolean kq = showMessage("Vui lòng chọn dữ liệu muốn xóa");
        }
    }//GEN-LAST:event_btnHuySachActionPerformed

    private void btnSuaSachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaSachActionPerformed
        int selectedRow  = tbSach.getSelectedRow();
        if(selectedRow != -1)
        {
            DefaultTableModel model = (DefaultTableModel) tbSach.getModel();
            String maSach = model.getValueAt(selectedRow, 0).toString();
            ImageIcon icon = (ImageIcon) model.getValueAt(selectedRow, 1);
            String anhSach = icon.getDescription();
            String tenSach = model.getValueAt(selectedRow, 2).toString();
            String tenTL = model.getValueAt(selectedRow, 3).toString();
            String tenTG = model.getValueAt(selectedRow, 4).toString();
            String ngayXB = model.getValueAt(selectedRow, 5).toString();
            String tenNXB = model.getValueAt(selectedRow, 6).toString();
            String giaBan = model.getValueAt(selectedRow, 7).toString();
            String soLuongTon = model.getValueAt(selectedRow, 8).toString();
            
            Form_SuaSach frm = new Form_SuaSach(this,maSach,anhSach,tenSach,tenTL,tenTG,ngayXB,tenNXB,giaBan,soLuongTon);
        
            JDialog dialog = new JDialog((JFrame)null, "Sửa sách", true);
            dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
            dialog.getContentPane().add(frm);
            dialog.pack();
            dialog.setLocationRelativeTo(null);
            dialog.setVisible(true);
            System.out.println(anhSach);
        }
        else
        {
            boolean kq = showMessage("Vui lòng chọn dữ liệu muốn cập nhật");
        }
    }//GEN-LAST:event_btnSuaSachActionPerformed

    private void btnTraCuuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTraCuuActionPerformed
        DefaultTableModel model = (DefaultTableModel) tbSach.getModel();
        model.setRowCount(0);
        hienThiDSTimKiem(txtTraCuu.getText());
    }//GEN-LAST:event_btnTraCuuActionPerformed

    private void cboSapXepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboSapXepActionPerformed
        DefaultTableModel model = (DefaultTableModel) tbSach.getModel();
        model.setRowCount(0);
        if(cboSapXep.getSelectedItem().toString() == "Giá bán")
            hienThiDSSapXep("GIABAN");
        else if(cboSapXep.getSelectedItem().toString() == "Mã sách")
            hienThiDSSapXep("MASACH");
        else if(cboSapXep.getSelectedItem().toString() == "Ngày xuất bản")
            hienThiDSSapXep("NGAYXUATBAN");
        else if(cboSapXep.getSelectedItem().toString() == "Số lượng tồn")
            hienThiDSSapXep("SOLUONGTON");
        else if(cboSapXep.getSelectedItem().toString() == "Tên sách")
            hienThiDSSapXep("TENSACH");
        else if(cboSapXep.getSelectedItem().toString() == "Tên tác giả")
            hienThiDSSapXep("TENTG");
        else if(cboSapXep.getSelectedItem().toString() == "Thể loại")
            hienThiDSSapXep("TENTL");
        else if(cboSapXep.getSelectedIndex()==0)
            hienThiDS();
    }//GEN-LAST:event_cboSapXepActionPerformed
    
    public int getSelectedRowIndex() {
        return tbSach.getSelectedRow();
    }

    public void removeSelectedRow(int rowIndex) {
        DefaultTableModel model = (DefaultTableModel) tbSach.getModel();
        model.removeRow(rowIndex);
    }
    
    private boolean showMessage(String message) {
        Message obj = new Message(Main.getFrames()[0], true);
        obj.showMessage(message);
        return obj.isOk();
    }
    
    public void hienThiDS() {
        ArrayList<SachDTO> ds = SachDAO.layDS();
        DefaultTableModel model = (DefaultTableModel) this.tbSach.getModel();
        for (SachDTO s : ds) {
            if(s.getTrangThai() == 1) {
                ImageIcon originalIcon = new ImageIcon(s.getAnhSach());
                Image originalImage = originalIcon.getImage();

                // Kích thước mới cho ảnh (ví dụ: 100x100 pixel)
                int newWidth = 130;
                int newHeight = 130;

                // Thay đổi kích thước của ảnh
                Image scaledImage = originalImage.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);

                // Tạo ImageIcon từ ảnh đã thay đổi kích thước
                ImageIcon scaledIcon = new ImageIcon(scaledImage);
                scaledIcon.setDescription(s.getAnhSach());

                // Thêm dữ liệu vào hàng của bảng
                Object[] rowData = {s.getMaSach(), scaledIcon, s.getTenSach(),s.getMaTL(), s.getMaTG(), s.getNgayXuatBan(), s.getMaNXB(), s.getGiaBan(), s.getSoLuongTon()};
                model.addRow(rowData);
            }
        }
        // Đặt trình vẽ cột cho bảng
        tbSach.setDefaultRenderer(Object.class, new ImageRenderer());
    }
    
    // Phương thức để kiểm tra xem bảng có chứa ImageIcon không
    private boolean checkForImageIcon(DefaultTableModel model) {
        for (int row = 0; row < model.getRowCount(); row++) {
            Object value = model.getValueAt(row, 1); // 1 là chỉ số cột chứa ImageIcon
            if (value instanceof ImageIcon) {
                return true;
            }
        }
        return false;
    }


    public void hienThiDSTimKiem(String traCuu) {
        ArrayList<SachDTO> ds = SachDAO.timKiem(traCuu);
        DefaultTableModel model = (DefaultTableModel) this.tbSach.getModel();
        for (SachDTO s : ds) {
            if(s.getTrangThai() == 1)
            {
                ImageIcon originalIcon = new ImageIcon(s.getAnhSach());
                Image originalImage = originalIcon.getImage();

                // Kích thước mới cho ảnh (ví dụ: 100x100 pixel)
                int newWidth = 130;
                int newHeight = 130;

                // Thay đổi kích thước của ảnh
                Image scaledImage = originalImage.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);

                // Tạo ImageIcon từ ảnh đã thay đổi kích thước
                ImageIcon scaledIcon = new ImageIcon(scaledImage);
                scaledIcon.setDescription(s.getAnhSach());

                // Thêm dữ liệu vào hàng của bảng
                Object[] rowData = {s.getMaSach(), scaledIcon, s.getTenSach(),s.getMaTL(), s.getMaTG(), s.getNgayXuatBan(), s.getMaNXB(), s.getGiaBan(), s.getSoLuongTon()};
                model.addRow(rowData);
            }
        }
        tbSach.setDefaultRenderer(Object.class, new ImageRenderer());
    }
    
    public void hienThiDSSapXep(String dulieu) {
        ArrayList<SachDTO> ds = SachDAO.sapXep(dulieu);
        DefaultTableModel model = (DefaultTableModel) this.tbSach.getModel();
        for (SachDTO s : ds) {
            if(s.getTrangThai() == 1)
            {
                ImageIcon originalIcon = new ImageIcon(s.getAnhSach());
                Image originalImage = originalIcon.getImage();

                // Kích thước mới cho ảnh (ví dụ: 100x100 pixel)
                int newWidth = 130;
                int newHeight = 130;

                // Thay đổi kích thước của ảnh
                Image scaledImage = originalImage.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);

                // Tạo ImageIcon từ ảnh đã thay đổi kích thước
                ImageIcon scaledIcon = new ImageIcon(scaledImage);
                scaledIcon.setDescription(s.getAnhSach());

                // Thêm dữ liệu vào hàng của bảng
                Object[] rowData = {s.getMaSach(), scaledIcon, s.getTenSach(),s.getMaTL(), s.getMaTG(), s.getNgayXuatBan(), s.getMaNXB(), s.getGiaBan(), s.getSoLuongTon()};
                model.addRow(rowData);
            }
        }
        tbSach.setDefaultRenderer(Object.class, new ImageRenderer());
    }
    
    public void capNhatDuLieuBang(ArrayList<SachDTO> ds) {
        DefaultTableModel model = (DefaultTableModel) tbSach.getModel();
        model.setRowCount(0);
        for (SachDTO s : ds) {
            if(s.getTrangThai() == 1)
            {
                ImageIcon originalIcon = new ImageIcon(s.getAnhSach());
                Image originalImage = originalIcon.getImage();

                // Kích thước mới cho ảnh (ví dụ: 100x100 pixel)
                int newWidth = 130;
                int newHeight = 130;

                // Thay đổi kích thước của ảnh
                Image scaledImage = originalImage.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);

                // Tạo ImageIcon từ ảnh đã thay đổi kích thước
                ImageIcon scaledIcon = new ImageIcon(scaledImage);
                scaledIcon.setDescription(s.getAnhSach());

                // Thêm dữ liệu vào hàng của bảng
                Object[] rowData = {s.getMaSach(), scaledIcon, s.getTenSach(),s.getMaTL(), s.getMaTG(), s.getNgayXuatBan(), s.getMaNXB(), s.getGiaBan(), s.getSoLuongTon()};
                model.addRow(rowData);
            }
        }
        tbSach.setDefaultRenderer(Object.class, new ImageRenderer());
    }
    public void loadDataToTable() {
        DefaultTableModel model = (DefaultTableModel) tbSach.getModel();
        model.setRowCount(0);
        hienThiDS();
    }
    

    public int khoaChinhTuDong()
    {
        int count = 0;
        try {
            String sql = "SELECT COUNT(*) as count FROM SACH";
            
            ResultSet rs = conn.executeQuery(sql);
            while(rs.next())
                count = rs.getInt("count");
        } catch (Exception e) {
        }
        return count;
    }
    
    private void suaThongTinKhiDoubleClick() {
        tbSach.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    int selectedRow = tbSach.getSelectedRow();
                    if (selectedRow != -1) {
                        DefaultTableModel model = (DefaultTableModel) tbSach.getModel();
                        String maSach = model.getValueAt(selectedRow, 0).toString();
                        String anhSach = model.getValueAt(selectedRow, 1).toString();
                        String tenSach = model.getValueAt(selectedRow, 2).toString();
                        String tenTL = model.getValueAt(selectedRow, 3).toString();
                        String tenTG = model.getValueAt(selectedRow, 4).toString();
                        String ngayXB = model.getValueAt(selectedRow, 5).toString();
                        String tenNXB = model.getValueAt(selectedRow, 6).toString();
                        String giaBan = model.getValueAt(selectedRow, 7).toString();
                        String soLuongTon = model.getValueAt(selectedRow, 8).toString();

                        Form_SuaSach frm = new Form_SuaSach(Form_QuanLySach.this, maSach,anhSach, tenSach, tenTL, tenTG, ngayXB, tenNXB, giaBan, soLuongTon);

                        JDialog dialog = new JDialog((JFrame) null, "Sửa sách", true);
                        dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
                        dialog.getContentPane().add(frm);
                        dialog.pack();
                        dialog.setLocationRelativeTo(null);
                        dialog.setVisible(true);
                    } else {
                        boolean kq = showMessage("Vui lòng chọn dữ liệu muốn cập nhật");
                    }
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.raven.component.Button btnHuySach;
    private com.raven.component.Button btnSapXep;
    private com.raven.component.Button btnSuaSach;
    private com.raven.component.Button btnThemSach;
    private com.raven.component.Button btnTraCuu;
    private combo_suggestion.ComboBoxSuggestion cboSapXep;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private com.raven.component.Table tbSach;
    private com.raven.component.TextField txtTraCuu;
    // End of variables declaration//GEN-END:variables
}
