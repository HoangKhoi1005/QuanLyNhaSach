/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.raven.form;

import SQLServerProvider.SQLServerProvider;
import com.DAO.NhanVienDAO;
import com.DTO.NhanVienDTO;
import com.raven.dialog.Message;
import java.awt.Image;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ACER
 */
public class Form_QuanLyNhanVien extends javax.swing.JPanel {
    private SQLServerProvider conn;
    private Main main;
    /**
     * Creates new form Form_QuanLyNhanVien
     */
    public Form_QuanLyNhanVien(Main main) {
        this.main = main;
        initComponents();
        conn = new SQLServerProvider();
        conn.open();
        hienThiDS();
        tbNhanVien.setRowHeight(130);
        conn.close();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbNhanVien = new com.raven.component.Table();
        btnTraCuu = new com.raven.component.Button();
        txtTraCuu = new com.raven.component.TextField();
        cboSapXep = new combo_suggestion.ComboBoxSuggestion();
        btnXoaNV = new com.raven.component.Button();
        btnCapNhatNV = new com.raven.component.Button();
        btnThemNV = new com.raven.component.Button();
        btnSapXep = new com.raven.component.Button();

        setOpaque(false);

        jLabel1.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(4, 72, 210));
        jLabel1.setText("Admin / Quản Lý Nhân Viên");

        tbNhanVien.setBackground(new java.awt.Color(236, 234, 234));
        tbNhanVien.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã nhân viên", "Ảnh nhân viên", "Tên nhân viên", "Chức vụ", "Địa chỉ", "Số điện thoại", "Email"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Byte.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbNhanVien.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        tbNhanVien.setGridColor(new java.awt.Color(204, 204, 204));
        tbNhanVien.setSelectionBackground(new java.awt.Color(102, 102, 255));
        tbNhanVien.setSelectionForeground(new java.awt.Color(255, 255, 255));
        tbNhanVien.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tbNhanVien.setShowGrid(true);
        jScrollPane2.setViewportView(tbNhanVien);

        btnTraCuu.setBackground(new java.awt.Color(153, 153, 255));
        btnTraCuu.setForeground(new java.awt.Color(255, 255, 255));
        btnTraCuu.setText("Tra Cứu");
        btnTraCuu.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        btnTraCuu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTraCuuActionPerformed(evt);
            }
        });

        txtTraCuu.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtTraCuu.setName(""); // NOI18N
        txtTraCuu.setShadowColor(new java.awt.Color(99, 91, 255));

        cboSapXep.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Vui lòng chọn dữ liệu cần sắp xếp--", "Mã nhân viên", "Tên nhân viên", "Chức vụ", "Địa chỉ", "Email" }));
        cboSapXep.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        cboSapXep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboSapXepActionPerformed(evt);
            }
        });

        btnXoaNV.setBackground(new java.awt.Color(244, 67, 54));
        btnXoaNV.setForeground(new java.awt.Color(255, 255, 255));
        btnXoaNV.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/raven/icon/minus.png"))); // NOI18N
        btnXoaNV.setText("Xóa nhân viên");
        btnXoaNV.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnXoaNV.setIconTextGap(10);
        btnXoaNV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaNVActionPerformed(evt);
            }
        });

        btnCapNhatNV.setBackground(new java.awt.Color(0, 140, 186));
        btnCapNhatNV.setForeground(new java.awt.Color(255, 255, 255));
        btnCapNhatNV.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/raven/icon/edit_1.png"))); // NOI18N
        btnCapNhatNV.setText("Cập nhật thông tin");
        btnCapNhatNV.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnCapNhatNV.setIconTextGap(10);
        btnCapNhatNV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCapNhatNVActionPerformed(evt);
            }
        });

        btnThemNV.setBackground(new java.awt.Color(76, 175, 80));
        btnThemNV.setForeground(new java.awt.Color(255, 255, 255));
        btnThemNV.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/raven/icon/addWhite.png"))); // NOI18N
        btnThemNV.setText("Thêm nhân viên");
        btnThemNV.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnThemNV.setIconTextGap(10);
        btnThemNV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemNVActionPerformed(evt);
            }
        });

        btnSapXep.setBackground(new java.awt.Color(153, 153, 255));
        btnSapXep.setForeground(new java.awt.Color(255, 255, 255));
        btnSapXep.setText("Sắp xếp theo:");
        btnSapXep.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtTraCuu, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnTraCuu, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 224, Short.MAX_VALUE)
                                .addComponent(btnSapXep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cboSapXep, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnThemNV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnXoaNV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCapNhatNV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTraCuu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTraCuu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboSapXep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSapXep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnThemNV, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnXoaNV, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCapNhatNV, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnTraCuuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTraCuuActionPerformed
        DefaultTableModel model = (DefaultTableModel) tbNhanVien.getModel();
        model.setRowCount(0);
        hienThiDSTimKiem(txtTraCuu.getText());
    }//GEN-LAST:event_btnTraCuuActionPerformed

    private void cboSapXepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboSapXepActionPerformed
        DefaultTableModel model = (DefaultTableModel) tbNhanVien.getModel();
        model.setRowCount(0);
        if("Mã nhân viên".equals(cboSapXep.getSelectedItem().toString()))
        hienThiDSSapXep("MANV");
        else if("Tên nhân viên".equals(cboSapXep.getSelectedItem().toString()))
        hienThiDSSapXep("HOTENNV");
        else if("Địa chỉ".equals(cboSapXep.getSelectedItem().toString()))
        hienThiDSSapXep("DIACHINV");
        else if("Email".equals(cboSapXep.getSelectedItem().toString()))
        hienThiDSSapXep("EMAILNV");
        else if("Chức vụ".equals(cboSapXep.getSelectedItem().toString()))
        hienThiDSSapXep("TENCV");
        else if(cboSapXep.getSelectedIndex()==0)
        hienThiDS();
    }//GEN-LAST:event_cboSapXepActionPerformed

    private void btnXoaNVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaNVActionPerformed
        int selectedRow  = tbNhanVien.getSelectedRow();
        if(selectedRow != -1)
        {
            DefaultTableModel model = (DefaultTableModel) tbNhanVien.getModel();
            String maNV = model.getValueAt(selectedRow, 0).toString();
            ImageIcon icon = (ImageIcon) model.getValueAt(selectedRow, 1);
            String anhNV = icon.getDescription();
            String tenNV = model.getValueAt(selectedRow, 2).toString();
            String tenCV = model.getValueAt(selectedRow, 3).toString();
            String diaChi = model.getValueAt(selectedRow, 4).toString();
            String soDT = model.getValueAt(selectedRow, 5).toString();
            String email = model.getValueAt(selectedRow, 6).toString();

            Form_HuyNhanVien frm = new Form_HuyNhanVien(this,maNV,anhNV,tenNV,tenCV,diaChi,soDT,email);

            JDialog dialog = new JDialog((JFrame)null, "Hủy nhà cung cấp", true);
            dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
            dialog.getContentPane().add(frm);
            dialog.pack();
            dialog.setLocationRelativeTo(null);
            dialog.setVisible(true);
        }
        else
        {
            boolean kq = showMessage("Vui lòng chọn dữ liệu muốn xóa");
        }
    }//GEN-LAST:event_btnXoaNVActionPerformed

    private void btnCapNhatNVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCapNhatNVActionPerformed
        int selectedRow  = tbNhanVien.getSelectedRow();
        if(selectedRow != -1)
        {
            DefaultTableModel model = (DefaultTableModel) tbNhanVien.getModel();
            String maNV = model.getValueAt(selectedRow, 0).toString();
            ImageIcon icon = (ImageIcon) model.getValueAt(selectedRow, 1);
            String anhNV = icon.getDescription();
            String tenNV = model.getValueAt(selectedRow, 2).toString();
            String tenCV = model.getValueAt(selectedRow, 3).toString();
            String diaChi = model.getValueAt(selectedRow, 4).toString();
            String soDT = model.getValueAt(selectedRow, 5).toString();
            String email = model.getValueAt(selectedRow, 6).toString();

            Form_SuaNhanVien frm = new Form_SuaNhanVien(this,maNV,anhNV,tenNV,tenCV,diaChi,soDT,email);

            JDialog dialog = new JDialog((JFrame)null, "Sửa thông tin nhân viên", true);
            dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
            dialog.getContentPane().add(frm);
            dialog.pack();
            dialog.setLocationRelativeTo(null);
            dialog.setVisible(true);
        }
        else
        {
            boolean kq = showMessage("Vui lòng chọn dữ liệu muốn sửa");
        }
    }//GEN-LAST:event_btnCapNhatNVActionPerformed

    private void btnThemNVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemNVActionPerformed
        Form_ThemNhanVien frm = new Form_ThemNhanVien(this,main);

        JDialog dialog = new JDialog((JFrame)null, "Thêm nhà cung cấp", true);
        dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        dialog.getContentPane().add(frm);
        dialog.pack();
        dialog.setLocationRelativeTo(null);
        dialog.setVisible(true);
    }//GEN-LAST:event_btnThemNVActionPerformed

    public void hienThiDS() {
        ArrayList<NhanVienDTO> ds = NhanVienDAO.layDS();
        DefaultTableModel model = (DefaultTableModel) this.tbNhanVien.getModel();
        for (NhanVienDTO nv : ds) {
            if(nv.getTrangThai() == 1) {
                ImageIcon originalIcon = new ImageIcon(nv.getAnhNV());
                Image originalImage = originalIcon.getImage();

                // Kích thước mới cho ảnh (ví dụ: 100x100 pixel)
                int newWidth = 130;
                int newHeight = 130;

                // Thay đổi kích thước của ảnh
                Image scaledImage = originalImage.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);

                // Tạo ImageIcon từ ảnh đã thay đổi kích thước
                ImageIcon scaledIcon = new ImageIcon(scaledImage);
                scaledIcon.setDescription(nv.getAnhNV());

                // Thêm dữ liệu vào hàng của bảng
                Object[] rowData = {nv.getMaNV(), scaledIcon, nv.getHoTenNV(),nv.getMaCV(), nv.getDiaChiNV(), nv.getSoDT(), nv.getEmailNV()};
                model.addRow(rowData);
            }
        }
        // Đặt trình vẽ cột cho bảng
        tbNhanVien.setDefaultRenderer(Object.class, new ImageRenderer());
    }
    
    public void hienThiDSTimKiem(String traCuu) {
        ArrayList<NhanVienDTO> ds = NhanVienDAO.timKiem(traCuu);
        DefaultTableModel model = (DefaultTableModel) this.tbNhanVien.getModel();
         for (NhanVienDTO nv : ds) {
            if(nv.getTrangThai() == 1) {
                ImageIcon originalIcon = new ImageIcon(nv.getAnhNV());
                Image originalImage = originalIcon.getImage();

                // Kích thước mới cho ảnh (ví dụ: 100x100 pixel)
                int newWidth = 130;
                int newHeight = 130;

                // Thay đổi kích thước của ảnh
                Image scaledImage = originalImage.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);

                // Tạo ImageIcon từ ảnh đã thay đổi kích thước
                ImageIcon scaledIcon = new ImageIcon(scaledImage);
                scaledIcon.setDescription(nv.getAnhNV());

                // Thêm dữ liệu vào hàng của bảng
                Object[] rowData = {nv.getMaNV(), scaledIcon, nv.getHoTenNV(),nv.getMaCV(), nv.getDiaChiNV(), nv.getSoDT(), nv.getEmailNV()};
                model.addRow(rowData);
            }
        }
        // Đặt trình vẽ cột cho bảng
        tbNhanVien.setDefaultRenderer(Object.class, new ImageRenderer());
    }
    
    public void hienThiDSSapXep(String dulieu) {
        ArrayList<NhanVienDTO> ds = NhanVienDAO.sapXep(dulieu);
        DefaultTableModel model = (DefaultTableModel) this.tbNhanVien.getModel();
        for (NhanVienDTO nv : ds) {
            if(nv.getTrangThai() == 1) {
                ImageIcon originalIcon = new ImageIcon(nv.getAnhNV());
                Image originalImage = originalIcon.getImage();

                // Kích thước mới cho ảnh (ví dụ: 100x100 pixel)
                int newWidth = 130;
                int newHeight = 130;

                // Thay đổi kích thước của ảnh
                Image scaledImage = originalImage.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);

                // Tạo ImageIcon từ ảnh đã thay đổi kích thước
                ImageIcon scaledIcon = new ImageIcon(scaledImage);
                scaledIcon.setDescription(nv.getAnhNV());

                // Thêm dữ liệu vào hàng của bảng
                Object[] rowData = {nv.getMaNV(), scaledIcon, nv.getHoTenNV(),nv.getMaCV(), nv.getDiaChiNV(), nv.getSoDT(), nv.getEmailNV()};
                model.addRow(rowData);
            }
        }
        tbNhanVien.setDefaultRenderer(Object.class, new ImageRenderer());
    }
    
    public void capNhatDuLieuBang(ArrayList<NhanVienDTO> ds) {
        DefaultTableModel model = (DefaultTableModel) tbNhanVien.getModel();
        model.setRowCount(0);
        for (NhanVienDTO nv : ds) {
            if(nv.getTrangThai() == 1) {
                ImageIcon originalIcon = new ImageIcon(nv.getAnhNV());
                Image originalImage = originalIcon.getImage();

                // Kích thước mới cho ảnh (ví dụ: 100x100 pixel)
                int newWidth = 130;
                int newHeight = 130;

                // Thay đổi kích thước của ảnh
                Image scaledImage = originalImage.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);

                // Tạo ImageIcon từ ảnh đã thay đổi kích thước
                ImageIcon scaledIcon = new ImageIcon(scaledImage);
                scaledIcon.setDescription(nv.getAnhNV());

                // Thêm dữ liệu vào hàng của bảng
                Object[] rowData = {nv.getMaNV(), scaledIcon, nv.getHoTenNV(),nv.getMaCV(), nv.getDiaChiNV(), nv.getSoDT(), nv.getEmailNV()};
                model.addRow(rowData);
            }
        }
        tbNhanVien.setDefaultRenderer(Object.class, new ImageRenderer());
    }
    public void loadDataToTable() {
        DefaultTableModel model = (DefaultTableModel) tbNhanVien.getModel();
        model.setRowCount(0);
        hienThiDS();
    }
    
    private boolean showMessage(String message) {
        Message obj = new Message(Main.getFrames()[0], true);
        obj.showMessage(message);
        return obj.isOk();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.raven.component.Button btnCapNhatNV;
    private com.raven.component.Button btnSapXep;
    private com.raven.component.Button btnThemNV;
    private com.raven.component.Button btnTraCuu;
    private com.raven.component.Button btnXoaNV;
    private combo_suggestion.ComboBoxSuggestion cboSapXep;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private com.raven.component.Table tbNhanVien;
    private com.raven.component.TextField txtTraCuu;
    // End of variables declaration//GEN-END:variables
}
